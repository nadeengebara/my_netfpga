#-----------------------------------------------------------
# Vivado v2016.4 (64-bit)
# SW Build 1756540 on Mon Jan 23 19:11:19 MST 2017
# IP Build 1755317 on Mon Jan 23 20:30:07 MST 2017
# Start of session at: Sun Nov 11 17:27:37 2018
# Process ID: 20001
# Current directory: /home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/test
# Command line: vivado -mode batch -source ../../../projects/reference_switch_lite/hw/tcl/reference_switch_lite_sim.tcl -tclargs both_parser_test
# Log file: /home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/test/vivado.log
# Journal file: /home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/test/vivado.jou
#-----------------------------------------------------------
source ../../../projects/reference_switch_lite/hw/tcl/reference_switch_lite_sim.tcl
# set design $::env(NF_PROJECT_NAME)
# set top top_sim
# set sim_top top_tb
# set device  xc7vx690t-3-ffg1761
# set proj_dir ./project
# set public_repo_dir $::env(SUME_FOLDER)/lib/my_hw/
# set xilinx_repo_dir $::env(XILINX_PATH)/data/ip/xilinx/
# set repo_dir ./ip_repo
# set bit_settings $::env(CONSTRAINTS)/generic_bit.xdc 
# set project_constraints $::env(NF_DESIGN_DIR)/hw/constraints/nf_sume_general.xdc
# set nf_10g_constraints $::env(NF_DESIGN_DIR)/hw/constraints/nf_sume_10g.xdc
# set pcie_2_axilite_ip ../../../lib/hw/xilinx/cores/pcie2axilite_bridge/component.xml
# set test_name [lindex $argv 0] 
# source $::env(NF_DESIGN_DIR)/hw/tcl/$::env(NF_PROJECT_NAME)_defines.tcl
## set MICROBLAZE_AXI_IIC_BASEADDR 0x40800000
## set MICROBLAZE_AXI_IIC_HIGHADDR 0x4080FFFF
## set MICROBLAZE_AXI_IIC_SIZEADDR 0x10000
## set MICROBLAZE_UARTLITE_BASEADDR 0x40600000
## set MICROBLAZE_UARTLITE_HIGHADDR 0x4060FFFF
## set MICROBLAZE_UARTLITE_SIZEADDR 0x10000
## set MICROBLAZE_DLMB_BRAM_BASEADDR 0x00000000
## set MICROBLAZE_DLMB_BRAM_HIGHADDR 0x0000FFFF
## set MICROBLAZE_DLMB_BRAM_SIZEADDR 0x10000
## set MICROBLAZE_ILMB_BRAM_BASEADDR 0x00000000
## set MICROBLAZE_ILMB_BRAM_HIGHADDR 0x0000FFFF
## set MICROBLAZE_ILMB_BRAM_SIZEADDR 0x10000
## set MICROBLAZE_AXI_INTC_BASEADDR 0x41200000
## set MICROBLAZE_AXI_INTC_HIGHADDR 0x4120FFFF
## set MICROBLAZE_AXI_INTC_SIZEADDR 0x10000
## set M00_BASEADDR 0x44000000
## set M00_HIGHADDR 0x44000FFF
## set M00_SIZEADDR 0x1000
## set M01_BASEADDR 0x44010000
## set M01_HIGHADDR 0x44010FFF
## set M01_SIZEADDR 0x1000
## set M02_BASEADDR 0x44020000
## set M02_HIGHADDR 0x44020FFF
## set M02_SIZEADDR 0x1000
## set M03_BASEADDR 0x44030000
## set M03_HIGHADDR 0x44030FFF
## set M03_SIZEADDR 0x1000
## set M04_BASEADDR 0x44040000
## set M04_HIGHADDR 0x44040FFF
## set M04_SIZEADDR 0x1000
## set M05_BASEADDR 0x44050000
## set M05_HIGHADDR 0x44050FFF
## set M05_SIZEADDR 0x1000
## set M08_BASEADDR 0x44060000
## set M08_HIGHADDR 0x44060FFF
## set M08_SIZEADDR 0x1000
## set IDENTIFIER_BASEADDR $M00_BASEADDR
## set IDENTIFIER_HIGHADDR $M00_HIGHADDR
## set IDENTIFIER_SIZEADDR $M00_SIZEADDR
## set PARSER_BASEADDR $M01_BASEADDR
## set PARSER_HIGHADDR $M01_HIGHADDR
## set PARSER_SIZEADDR $M01_SIZEADDR
## set NF_10G_INTERFACE0_BASEADDR $M02_BASEADDR
## set NF_10G_INTERFACE0_HIGHADDR $M02_HIGHADDR
## set NF_10G_INTERFACE0_SIZEADDR $M02_SIZEADDR
## set NF_10G_INTERFACE1_BASEADDR $M03_BASEADDR
## set NF_10G_INTERFACE1_HIGHADDR $M03_HIGHADDR
## set NF_10G_INTERFACE1_SIZEADDR $M03_SIZEADDR
## set NF_10G_INTERFACE2_BASEADDR $M04_BASEADDR
## set NF_10G_INTERFACE2_HIGHADDR $M04_HIGHADDR
## set NF_10G_INTERFACE2_SIZEADDR $M04_SIZEADDR
## set NF_10G_INTERFACE3_BASEADDR $M05_BASEADDR
## set NF_10G_INTERFACE3_HIGHADDR $M05_HIGHADDR
## set NF_10G_INTERFACE3_SIZEADDR $M05_SIZEADDR
## set NF_RIFFA_DMA_BASEADDR $M08_BASEADDR
## set NF_RIFFA_DMA_HIGHADDR $M08_HIGHADDR
## set NF_RIFFA_DMA_SIZEADDR $M08_SIZEADDR
# create_project -name ${design} -force -dir "$::env(NF_DESIGN_DIR)/hw/${proj_dir}" -part ${device}
# set_property source_mgmt_mode DisplayOnly [current_project]  
# set_property top ${top} [current_fileset]
# puts "Creating User Datapath reference project"
Creating User Datapath reference project
# create_fileset -constrset -quiet constraints
# file copy ${public_repo_dir}/ ${repo_dir}
# set_property ip_repo_paths ${repo_dir} [current_fileset]
# add_files -fileset constraints -norecurse ${bit_settings}
# add_files -fileset constraints -norecurse ${project_constraints}
# add_files -fileset constraints -norecurse ${nf_10g_constraints}
# set_property is_enabled true [get_files ${project_constraints}]
# set_property is_enabled true [get_files ${bit_settings}]
# set_property is_enabled true [get_files ${project_constraints}]
# update_ip_catalog
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/test/ip_repo'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/Xilinx/Vivado/2016.4/data/ip'.
# create_ip -name pswitch_parser -vendor NetFPGA -library NetFPGA -module_name pswitch_parser_ip
# set_property generate_synth_checkpoint false [get_files pswitch_parser_ip.xci]
# reset_target all [get_ips pswitch_parser_ip]
# generate_target all [get_ips pswitch_parser_ip]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'pswitch_parser_ip'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'pswitch_parser_ip'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'pswitch_parser_ip'...
# create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.3 -module_name identifier_ip
INFO: [Device 21-403] Loading part xc7vx690tffg1761-3
create_ip: Time (s): cpu = 00:00:06 ; elapsed = 00:00:06 . Memory (MB): peak = 1402.434 ; gain = 324.852 ; free physical = 59417 ; free virtual = 127656
# set_property -dict [list CONFIG.Interface_Type {AXI4} CONFIG.AXI_Type {AXI4_Lite} CONFIG.AXI_Slave_Type {Memory_Slave} CONFIG.Use_AXI_ID {false} CONFIG.Load_Init_File {true} CONFIG.Coe_File {/../../../../../../create_ip/id_rom16x32.coe} CONFIG.Fill_Remaining_Memory_Locations {true} CONFIG.Remaining_Memory_Locations {DEADDEAD} CONFIG.Memory_Type {Simple_Dual_Port_RAM} CONFIG.Use_Byte_Write_Enable {true} CONFIG.Byte_Size {8} CONFIG.Assume_Synchronous_Clk {true} CONFIG.Write_Width_A {32} CONFIG.Write_Depth_A {1024} CONFIG.Read_Width_A {32} CONFIG.Operating_Mode_A {READ_FIRST} CONFIG.Write_Width_B {32} CONFIG.Read_Width_B {32} CONFIG.Operating_Mode_B {READ_FIRST} CONFIG.Enable_B {Use_ENB_Pin} CONFIG.Register_PortA_Output_of_Memory_Primitives {false} CONFIG.Register_PortB_Output_of_Memory_Primitives {false} CONFIG.Use_RSTB_Pin {true} CONFIG.Reset_Type {ASYNC} CONFIG.Port_A_Write_Rate {50} CONFIG.Port_B_Clock {100} CONFIG.Port_B_Enable_Rate {100}] [get_ips identifier_ip]
# set_property generate_synth_checkpoint false [get_files identifier_ip.xci]
# reset_target all [get_ips identifier_ip]
# generate_target all [get_ips identifier_ip]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'identifier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'identifier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'identifier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Miscellaneous' target for IP 'identifier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Change Log' target for IP 'identifier_ip'...
# create_ip -name clk_wiz -vendor xilinx.com -library ip -version 5.3 -module_name clk_wiz_ip
# set_property -dict [list CONFIG.PRIM_IN_FREQ {200.00} CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {200.000} CONFIG.USE_SAFE_CLOCK_STARTUP {true} CONFIG.RESET_TYPE {ACTIVE_LOW} CONFIG.CLKIN1_JITTER_PS {50.0} CONFIG.CLKOUT1_DRIVES {BUFGCE} CONFIG.CLKOUT2_DRIVES {BUFGCE} CONFIG.CLKOUT3_DRIVES {BUFGCE} CONFIG.CLKOUT4_DRIVES {BUFGCE} CONFIG.CLKOUT5_DRIVES {BUFGCE} CONFIG.CLKOUT6_DRIVES {BUFGCE} CONFIG.CLKOUT7_DRIVES {BUFGCE} CONFIG.MMCM_CLKFBOUT_MULT_F {5.000} CONFIG.MMCM_CLKIN1_PERIOD {5.0} CONFIG.MMCM_CLKOUT0_DIVIDE_F {5.000} CONFIG.RESET_PORT {resetn} CONFIG.CLKOUT1_JITTER {98.146} CONFIG.CLKOUT1_PHASE_ERROR {89.971}] [get_ips clk_wiz_ip]
# set_property generate_synth_checkpoint false [get_files clk_wiz_ip.xci]
# reset_target all [get_ips clk_wiz_ip]
# generate_target all [get_ips clk_wiz_ip]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'clk_wiz_ip'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'clk_wiz_ip'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'clk_wiz_ip'...
INFO: [IP_Flow 19-1686] Generating 'Implementation' target for IP 'clk_wiz_ip'...
INFO: [IP_Flow 19-1686] Generating 'Change Log' target for IP 'clk_wiz_ip'...
# create_ip -name barrier -vendor NetFPGA -library NetFPGA -module_name barrier_ip
# reset_target all [get_ips barrier_ip]
# generate_target all [get_ips barrier_ip]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'barrier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'barrier_ip'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'barrier_ip'...
# create_ip -name axis_sim_record -vendor NetFPGA -library NetFPGA -module_name axis_sim_record_ip0
# set_property -dict [list CONFIG.OUTPUT_FILE $::env(NF_DESIGN_DIR)/test/nf_interface_0_log.axi] [get_ips axis_sim_record_ip0]
# reset_target all [get_ips axis_sim_record_ip0]
# generate_target all [get_ips axis_sim_record_ip0]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_record_ip0'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_record_ip0'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_record_ip0'...
# create_ip -name axis_sim_record -vendor NetFPGA -library NetFPGA -module_name axis_sim_record_ip1
# set_property -dict [list CONFIG.OUTPUT_FILE $::env(NF_DESIGN_DIR)/test/nf_interface_1_log.axi] [get_ips axis_sim_record_ip1]
# reset_target all [get_ips axis_sim_record_ip1]
# generate_target all [get_ips axis_sim_record_ip1]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_record_ip1'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_record_ip1'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_record_ip1'...
# create_ip -name axis_sim_record -vendor NetFPGA -library NetFPGA -module_name axis_sim_record_ip2
# set_property -dict [list CONFIG.OUTPUT_FILE $::env(NF_DESIGN_DIR)/test/nf_interface_2_log.axi] [get_ips axis_sim_record_ip2]
# reset_target all [get_ips axis_sim_record_ip2]
# generate_target all [get_ips axis_sim_record_ip2]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_record_ip2'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_record_ip2'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_record_ip2'...
# create_ip -name axis_sim_record -vendor NetFPGA -library NetFPGA -module_name axis_sim_record_ip3
# set_property -dict [list CONFIG.OUTPUT_FILE $::env(NF_DESIGN_DIR)/test/nf_interface_3_log.axi] [get_ips axis_sim_record_ip3]
# reset_target all [get_ips axis_sim_record_ip3]
# generate_target all [get_ips axis_sim_record_ip3]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_record_ip3'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_record_ip3'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_record_ip3'...
# create_ip -name axis_sim_record -vendor NetFPGA -library NetFPGA -module_name axis_sim_record_ip4
# set_property -dict [list CONFIG.OUTPUT_FILE $::env(NF_DESIGN_DIR)/test/dma_0_log.axi] [get_ips axis_sim_record_ip4]
# reset_target all [get_ips axis_sim_record_ip4]
# generate_target all [get_ips axis_sim_record_ip4]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_record_ip4'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_record_ip4'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_record_ip4'...
# create_ip -name axis_sim_stim -vendor NetFPGA -library NetFPGA -module_name axis_sim_stim_ip0
# set_property -dict [list CONFIG.input_file $::env(NF_DESIGN_DIR)/test/nf_interface_0_stim.axi] [get_ips axis_sim_stim_ip0]
# generate_target all [get_ips axis_sim_stim_ip0]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_stim_ip0'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_stim_ip0'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_stim_ip0'...
# create_ip -name axis_sim_stim -vendor NetFPGA -library NetFPGA -module_name axis_sim_stim_ip1
# set_property -dict [list CONFIG.input_file $::env(NF_DESIGN_DIR)/test/nf_interface_1_stim.axi] [get_ips axis_sim_stim_ip1]
# generate_target all [get_ips axis_sim_stim_ip1]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_stim_ip1'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_stim_ip1'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_stim_ip1'...
# create_ip -name axis_sim_stim -vendor NetFPGA -library NetFPGA -module_name axis_sim_stim_ip2
# set_property -dict [list CONFIG.input_file $::env(NF_DESIGN_DIR)/test/nf_interface_2_stim.axi] [get_ips axis_sim_stim_ip2]
# generate_target all [get_ips axis_sim_stim_ip2]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_stim_ip2'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_stim_ip2'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_stim_ip2'...
# create_ip -name axis_sim_stim -vendor NetFPGA -library NetFPGA -module_name axis_sim_stim_ip3
# set_property -dict [list CONFIG.input_file $::env(NF_DESIGN_DIR)/test/nf_interface_3_stim.axi] [get_ips axis_sim_stim_ip3]
# generate_target all [get_ips axis_sim_stim_ip3]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_stim_ip3'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_stim_ip3'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_stim_ip3'...
# create_ip -name axis_sim_stim -vendor NetFPGA -library NetFPGA -module_name axis_sim_stim_ip4
# set_property -dict [list CONFIG.input_file $::env(NF_DESIGN_DIR)/test/dma_0_stim.axi] [get_ips axis_sim_stim_ip4]
# generate_target all [get_ips axis_sim_stim_ip4]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axis_sim_stim_ip4'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axis_sim_stim_ip4'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axis_sim_stim_ip4'...
# create_ip -name axi_sim_transactor -vendor NetFPGA -library NetFPGA -module_name axi_sim_transactor_ip
# set_property -dict [list CONFIG.STIM_FILE $::env(NF_DESIGN_DIR)/test/reg_stim.axi CONFIG.EXPECT_FILE $::env(NF_DESIGN_DIR)/test/reg_expect.axi CONFIG.LOG_FILE $::env(NF_DESIGN_DIR)/test/reg_stim.log] [get_ips axi_sim_transactor_ip]
# reset_target all [get_ips axi_sim_transactor_ip]
# generate_target all [get_ips axi_sim_transactor_ip]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'axi_sim_transactor_ip'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'axi_sim_transactor_ip'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'axi_sim_transactor_ip'...
# update_ip_catalog
INFO: [IP_Flow 19-1839] IP Catalog is up to date.
# source $::env(NF_DESIGN_DIR)/hw/tcl/control_sub_sim.tcl
## set scripts_vivado_version 2016.4
## set current_vivado_version [version -short]
## if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
##    puts ""
##    puts "ERROR: This script was created for Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."
## 
##    return 1
## }
## set design_name control_sub
## if { [get_projects -quiet] eq "" } {
##    puts "ERROR: Please open or create a project!"
##    return 1
## }
## set errMsg ""
## set nRet 0
## set cur_design [current_bd_design -quiet]
## set list_cells [get_bd_cells -quiet]
## if { ${design_name} eq "" } {
##    # USE CASES:
##    #    1) Design_name not set
## 
##    set errMsg "ERROR: Please set the variable <design_name> to a non-empty value."
##    set nRet 1
## 
## } elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
##    # USE CASES:
##    #    2): Current design opened AND is empty AND names same.
##    #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
##    #    4): Current design opened AND is empty AND names diff; design_name exists in project.
## 
##    if { $cur_design ne $design_name } {
##       puts "INFO: Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
##       set design_name [get_property NAME $cur_design]
##    }
##    puts "INFO: Constructing design in IPI design <$cur_design>..."
## 
## } elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
##    # USE CASES:
##    #    5) Current design opened AND has components AND same names.
## 
##    set errMsg "ERROR: Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
##    set nRet 1
## } elseif { [get_files -quiet ${design_name}.bd] ne "" } {
##    # USE CASES: 
##    #    6) Current opened design, has components, but diff names, design_name exists in project.
##    #    7) No opened design, design_name exists in project.
## 
##    set errMsg "ERROR: Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
##    set nRet 2
## 
## } else {
##    # USE CASES:
##    #    8) No opened design, design_name not in project.
##    #    9) Current opened design, has components, but diff names, design_name not in project.
## 
##    puts "INFO: Currently there is no design <$design_name> in project, so creating one..."
## 
##    create_bd_design $design_name
## 
##    puts "INFO: Making design <$design_name> as current_bd_design."
##    current_bd_design $design_name
## 
## }
INFO: Currently there is no design <control_sub> in project, so creating one...
Wrote  : </home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/hw/project/reference_switch_lite.srcs/sources_1/bd/control_sub/control_sub.bd> 
INFO: Making design <control_sub> as current_bd_design.
## puts "INFO: Currently the variable <design_name> is equal to \"$design_name\"."
INFO: Currently the variable <design_name> is equal to "control_sub".
## if { $nRet != 0 } {
##    puts $errMsg
##    return $nRet
## }
## proc create_root_design { parentCell } {
## 
##   if { $parentCell eq "" } {
##      set parentCell [get_bd_cells /]
##   }
## 
##   # Get object for parentCell
##   set parentObj [get_bd_cells $parentCell]
##   if { $parentObj == "" } {
##      puts "ERROR: Unable to find parent cell <$parentCell>!"
##      return
##   }
## 
##   # Make sure parentObj is hier blk
##   set parentType [get_property TYPE $parentObj]
##   if { $parentType ne "hier" } {
##      puts "ERROR: Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."
##      return
##   }
## 
##   # Save current instance; Restore later
##   set oldCurInst [current_bd_instance .]
## 
##   # Set parent object as current
##   current_bd_instance $parentObj
## 
## 
##   # Create interface ports
##   set M00_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M00_AXI
##   set M01_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M01_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M01_AXI
##   set M02_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M02_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M02_AXI
##   set M03_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M03_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M03_AXI
##   set M04_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M04_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M04_AXI
##   set M05_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M05_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M05_AXI
##   set M06_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M06_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M06_AXI
##   set M07_AXI [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M07_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.DATA_WIDTH {32} CONFIG.PROTOCOL {AXI4LITE}  ] $M07_AXI
##   set S00_AXI [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S00_AXI ]
##   set_property -dict [ list CONFIG.ADDR_WIDTH {32} CONFIG.ARUSER_WIDTH {0} CONFIG.AWUSER_WIDTH {0} CONFIG.BUSER_WIDTH {0} CONFIG.CLK_DOMAIN {} CONFIG.DATA_WIDTH {32} CONFIG.FREQ_HZ {100000000} CONFIG.ID_WIDTH {0} CONFIG.MAX_BURST_LENGTH {256} CONFIG.NUM_READ_OUTSTANDING {2} CONFIG.NUM_WRITE_OUTSTANDING {2} CONFIG.PHASE {0.000} CONFIG.PROTOCOL {AXI4} CONFIG.READ_WRITE_MODE {READ_WRITE} CONFIG.RUSER_WIDTH {0} CONFIG.SUPPORTS_NARROW_BURST {1} CONFIG.WUSER_WIDTH {0}  ] $S00_AXI
## 
##   # Create ports
##   set axi_lite_aclk [ create_bd_port -dir I -type clk axi_lite_aclk ]
##   set axi_lite_areset [ create_bd_port -dir I -type rst axi_lite_areset ]
##   set core_clk [ create_bd_port -dir I -type clk core_clk ]
##   set_property -dict [ list CONFIG.FREQ_HZ {200000000}  ] $core_clk
##   set core_resetn [ create_bd_port -dir I -type rst core_resetn ]
##   
##   
##     
## 
##   # Create instance: axi_interconnect_0, and set properties
##   set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
##   set_property -dict [ list CONFIG.NUM_MI {8} CONFIG.TRANSLATION_MODE {0} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M00_HAS_REGSLICE {3} CONFIG.M00_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M01_HAS_REGSLICE {3} CONFIG.M01_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M02_HAS_REGSLICE {3} CONFIG.M02_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M03_HAS_REGSLICE {3} CONFIG.M03_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M04_HAS_REGSLICE {3} CONFIG.M04_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M05_HAS_REGSLICE {3} CONFIG.M05_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M06_HAS_REGSLICE {3} CONFIG.M06_HAS_DATA_FIFO {1} ] $axi_interconnect_0
##   set_property -dict [list CONFIG.M07_HAS_REGSLICE {3} CONFIG.M07_HAS_DATA_FIFO {1} ] $axi_interconnect_0              
##   set_property -dict [list CONFIG.S00_HAS_REGSLICE {3} CONFIG.S00_HAS_DATA_FIFO {1} ] $axi_interconnect_0
## 
## 
## # Add AXI clock converter
## create_bd_cell -type ip -vlnv xilinx.com:ip:axi_clock_converter:2.1 axi_clock_converter_0
## connect_bd_intf_net [get_bd_intf_ports S00_AXI] [get_bd_intf_pins axi_clock_converter_0/S_AXI]
## connect_bd_intf_net [get_bd_intf_pins axi_clock_converter_0/M_AXI] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/S00_AXI]
## 
##   # Create interface connections
##   connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_ports M00_AXI] [get_bd_intf_pins axi_interconnect_0/M00_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_ports M01_AXI] [get_bd_intf_pins axi_interconnect_0/M01_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M02_AXI [get_bd_intf_ports M02_AXI] [get_bd_intf_pins axi_interconnect_0/M02_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M03_AXI [get_bd_intf_ports M03_AXI] [get_bd_intf_pins axi_interconnect_0/M03_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M04_AXI [get_bd_intf_ports M04_AXI] [get_bd_intf_pins axi_interconnect_0/M04_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M05_AXI [get_bd_intf_ports M05_AXI] [get_bd_intf_pins axi_interconnect_0/M05_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M06_AXI [get_bd_intf_ports M06_AXI] [get_bd_intf_pins axi_interconnect_0/M06_AXI]
##   connect_bd_intf_net -intf_net axi_interconnect_0_M07_AXI [get_bd_intf_ports M07_AXI] [get_bd_intf_pins axi_interconnect_0/M07_AXI]
## 
##   # Create port connections
##   connect_bd_net -net axi_lite_aclk_1 [get_bd_ports axi_lite_aclk]  [get_bd_pins axi_clock_converter_0/s_axi_aclk] 
## connect_bd_net -net core_clk_1 [get_bd_ports core_clk]  [get_bd_pins axi_clock_converter_0/m_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/M01_ACLK] [get_bd_pins axi_interconnect_0/M02_ACLK] [get_bd_pins axi_interconnect_0/M03_ACLK] [get_bd_pins axi_interconnect_0/M04_ACLK] [get_bd_pins axi_interconnect_0/M05_ACLK] [get_bd_pins axi_interconnect_0/M06_ACLK] [get_bd_pins axi_interconnect_0/M07_ACLK] 
## connect_bd_net -net axi_lite_areset_1 [get_bd_ports axi_lite_areset] [get_bd_pins axi_clock_converter_0/s_axi_aresetn] 
## connect_bd_net -net core_resetn_1 [get_bd_ports core_resetn] [get_bd_pins axi_clock_converter_0/m_axi_aresetn] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/M01_ARESETN] [get_bd_pins axi_interconnect_0/ARESETN]  [get_bd_pins axi_interconnect_0/M02_ARESETN] [get_bd_pins axi_interconnect_0/M03_ARESETN] [get_bd_pins axi_interconnect_0/M04_ARESETN] [get_bd_pins axi_interconnect_0/M05_ARESETN] [get_bd_pins axi_interconnect_0/M06_ARESETN] [get_bd_pins axi_interconnect_0/M07_ARESETN] 
## 
##   # Create address segments
## source $::env(NF_DESIGN_DIR)/hw/tcl/$::env(NF_PROJECT_NAME)_defines.tcl
##   assign_bd_address [get_bd_addr_segs {M00_AXI/Reg }]  
##   set_property offset $M00_BASEADDR [get_bd_addr_segs {S00_AXI/SEG_M00_AXI_Reg}]
##   set_property range $M00_SIZEADDR [get_bd_addr_segs {S00_AXI/SEG_M00_AXI_Reg}] 
## 
##  assign_bd_address [get_bd_addr_segs {M01_AXI/Reg }]  
##   set_property offset $M01_BASEADDR [get_bd_addr_segs {S00_AXI/SEG_M01_AXI_Reg}]
##   set_property range $M01_SIZEADDR [get_bd_addr_segs {S00_AXI/SEG_M01_AXI_Reg}] 
## 
## 
## #assign_bd_address [get_bd_addr_segs {M02_AXI/Reg }]  
## #  set_property offset $M02_BASEADDR [get_bd_addr_segs {S00_AXI/SEG_M02_AXI_Reg}]
## #  set_property range $M02_SIZEADDR [get_bd_addr_segs {S00_AXI/SEG_M02_AXI_Reg}] 
## 
## #assign_bd_address [get_bd_addr_segs {M03_AXI/Reg }]  
## #  set_property offset $M03_BASEADDR [get_bd_addr_segs {S00_AXI/SEG_M03_AXI_Reg}]
## #  set_property range $M03_SIZEADDR [get_bd_addr_segs {S00_AXI/SEG_M03_AXI_Reg}] 
## 
##  
##   # Restore current instance
##   current_bd_instance $oldCurInst
## 
##   save_bd_design
## }
## create_root_design ""
CRITICAL WARNING: [BD 41-737] Cannot set the parameter TRANSLATION_MODE on /axi_interconnect_0. It is read-only.
### set MICROBLAZE_AXI_IIC_BASEADDR 0x40800000
### set MICROBLAZE_AXI_IIC_HIGHADDR 0x4080FFFF
### set MICROBLAZE_AXI_IIC_SIZEADDR 0x10000
### set MICROBLAZE_UARTLITE_BASEADDR 0x40600000
### set MICROBLAZE_UARTLITE_HIGHADDR 0x4060FFFF
### set MICROBLAZE_UARTLITE_SIZEADDR 0x10000
### set MICROBLAZE_DLMB_BRAM_BASEADDR 0x00000000
### set MICROBLAZE_DLMB_BRAM_HIGHADDR 0x0000FFFF
### set MICROBLAZE_DLMB_BRAM_SIZEADDR 0x10000
### set MICROBLAZE_ILMB_BRAM_BASEADDR 0x00000000
### set MICROBLAZE_ILMB_BRAM_HIGHADDR 0x0000FFFF
### set MICROBLAZE_ILMB_BRAM_SIZEADDR 0x10000
### set MICROBLAZE_AXI_INTC_BASEADDR 0x41200000
### set MICROBLAZE_AXI_INTC_HIGHADDR 0x4120FFFF
### set MICROBLAZE_AXI_INTC_SIZEADDR 0x10000
### set M00_BASEADDR 0x44000000
### set M00_HIGHADDR 0x44000FFF
### set M00_SIZEADDR 0x1000
### set M01_BASEADDR 0x44010000
### set M01_HIGHADDR 0x44010FFF
### set M01_SIZEADDR 0x1000
### set M02_BASEADDR 0x44020000
### set M02_HIGHADDR 0x44020FFF
### set M02_SIZEADDR 0x1000
### set M03_BASEADDR 0x44030000
### set M03_HIGHADDR 0x44030FFF
### set M03_SIZEADDR 0x1000
### set M04_BASEADDR 0x44040000
### set M04_HIGHADDR 0x44040FFF
### set M04_SIZEADDR 0x1000
### set M05_BASEADDR 0x44050000
### set M05_HIGHADDR 0x44050FFF
### set M05_SIZEADDR 0x1000
### set M08_BASEADDR 0x44060000
### set M08_HIGHADDR 0x44060FFF
### set M08_SIZEADDR 0x1000
### set IDENTIFIER_BASEADDR $M00_BASEADDR
### set IDENTIFIER_HIGHADDR $M00_HIGHADDR
### set IDENTIFIER_SIZEADDR $M00_SIZEADDR
### set PARSER_BASEADDR $M01_BASEADDR
### set PARSER_HIGHADDR $M01_HIGHADDR
### set PARSER_SIZEADDR $M01_SIZEADDR
### set NF_10G_INTERFACE0_BASEADDR $M02_BASEADDR
### set NF_10G_INTERFACE0_HIGHADDR $M02_HIGHADDR
### set NF_10G_INTERFACE0_SIZEADDR $M02_SIZEADDR
### set NF_10G_INTERFACE1_BASEADDR $M03_BASEADDR
### set NF_10G_INTERFACE1_HIGHADDR $M03_HIGHADDR
### set NF_10G_INTERFACE1_SIZEADDR $M03_SIZEADDR
### set NF_10G_INTERFACE2_BASEADDR $M04_BASEADDR
### set NF_10G_INTERFACE2_HIGHADDR $M04_HIGHADDR
### set NF_10G_INTERFACE2_SIZEADDR $M04_SIZEADDR
### set NF_10G_INTERFACE3_BASEADDR $M05_BASEADDR
### set NF_10G_INTERFACE3_HIGHADDR $M05_HIGHADDR
### set NF_10G_INTERFACE3_SIZEADDR $M05_SIZEADDR
### set NF_RIFFA_DMA_BASEADDR $M08_BASEADDR
### set NF_RIFFA_DMA_HIGHADDR $M08_HIGHADDR
### set NF_RIFFA_DMA_SIZEADDR $M08_SIZEADDR
</M00_AXI/Reg> is being mapped into </S00_AXI> at <0x44A00000 [ 64K ]>
</M01_AXI/Reg> is being mapped into </S00_AXI> at <0x44A00000 [ 64K ]>
Wrote  : </home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/hw/project/reference_switch_lite.srcs/sources_1/bd/control_sub/control_sub.bd> 
# read_verilog "$::env(NF_DESIGN_DIR)/hw/hdl/axi_clocking.v"
# read_verilog "$::env(NF_DESIGN_DIR)/hw/hdl/nf_datapath.v"
# read_verilog "$::env(NF_DESIGN_DIR)/hw/hdl/top_sim.v"
# read_verilog "$::env(NF_DESIGN_DIR)/hw/hdl/top_tb.v"
# update_compile_order -fileset sources_1
# update_compile_order -fileset sim_1
# set_property top ${sim_top} [get_filesets sim_1]
# set_property include_dirs ${proj_dir} [get_filesets sim_1]
# set_property simulator_language Mixed [current_project]
# set_property verilog_define { {SIMULATION=1} } [get_filesets sim_1]
# set_property -name xsim.more_options -value {-testplusarg TESTNAME=basic_test} -objects [get_filesets sim_1]
# set_property runtime {} [get_filesets sim_1]
# set_property target_simulator xsim [current_project]
# set_property compxlib.xsim_compiled_library_dir {} [current_project]
# set_property top_lib xil_defaultlib [get_filesets sim_1]
# update_compile_order -fileset sim_1
loading libsume..
Traceback (most recent call last):
  File "/home/nadeen/SIGCOMM/PANAMA/Vivado/my_netfpga/projects/reference_switch_lite/test/both_parser_test/run.py", line 119, in <module>
    pkt0=Ether(src="aa:bb:aa:bb:aa:bb",dst="00:00:ff:00:00:00",EtherType=0x8888)/IP(src="0.0.0.1",dst="127.0.0.1")/payload_0
  File "/usr/lib/python2.7/dist-packages/scapy/base_classes.py", line 198, in __call__
    i.__init__(*args, **kargs)
  File "/usr/lib/python2.7/dist-packages/scapy/packet.py", line 84, in __init__
    self.fields[f] = self.get_field(f).any2i(self,fields[f])
  File "/usr/lib/python2.7/dist-packages/scapy/packet.py", line 113, in get_field
    return self.fieldtype[fld]
KeyError: 'EtherType'
    while executing
"exec python $::env(NF_DESIGN_DIR)/test/${test_name}/run.py"
    invoked from within
"set output [exec python $::env(NF_DESIGN_DIR)/test/${test_name}/run.py]"
    (file "../../../projects/reference_switch_lite/hw/tcl/reference_switch_lite_sim.tcl" line 186)
INFO: [Common 17-206] Exiting Vivado at Sun Nov 11 17:27:58 2018...
